name: Build/Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version from package.json
        id: get-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    timeout-minutes: 180
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Install the Apple certificate
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate to keychain
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Clean up
          rm certificate.p12

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: npm install --save-dev dmg-license

      - name: Build/Release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          # Signing
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          
          # Notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
          # Debug flags
          DEBUG: electron-builder,electron-notarize
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          release: false
          mac_certs: ${{ secrets.MACOS_CERTIFICATE }}
          mac_certs_password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          args: >
            --config.afterSign=./public_scripts/notarize.js
            --config.compression=store
            ${{ matrix.os == 'macos-latest' && '--mac --x64 --arm64 --config.mac.target=dmg --config.mac.target=zip --config.mac.minimumSystemVersion=10.12' ||
                matrix.os == 'windows-latest' && '--win --config.productName="Fyenance"' ||
                matrix.os == 'ubuntu-latest' && '--linux --config.productName="Fyenance"' }}
      - name: Sign Windows Build
        if: matrix.os == 'windows-latest'
        uses: azure/trusted-signing-action@v0.5.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE }}
          files-folder: ${{ github.workspace }}/dist/win-unpacked
          files-folder-filter: "exe,dll"  # Only sign executables and DLLs
          file-digest: "SHA256"
          timestamp-rfc3161: "http://timestamp.acs.microsoft.com"
          timestamp-digest: "SHA256"
          
      - name: Sign Windows Installer
        if: matrix.os == 'windows-latest'
        uses: azure/trusted-signing-action@v0.5.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE }}
          files-folder: ${{ github.workspace }}/dist
          files-folder-filter: "exe"
          file-digest: "SHA256"
          timestamp-rfc3161: "http://timestamp.acs.microsoft.com"
          timestamp-digest: "SHA256"
      - name: Notarize macOS Build
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Store notarization credentials
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD"
          
          # Function to notarize with retries and status updates
          notarize_with_retry() {
            local file_pattern=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to notarize $(basename $file_pattern)..."
              
              # Find the actual file
              local file_to_notarize=$(ls $file_pattern)
              if [ -z "$file_to_notarize" ]; then
                echo "Error: No file found matching pattern: $file_pattern"
                return 1
              fi
              
              echo "Submitting $(basename $file_to_notarize) for notarization..."
              
              # Submit for notarization and capture the request ID
              local submission_output=$(xcrun notarytool submit "$file_to_notarize" \
                --keychain-profile "notarytool-profile" \
                --verbose 2>&1)
              
              echo "Submission output: $submission_output"
              
              # Extract the submission ID using grep and awk
              local submission_id=$(echo "$submission_output" | grep "id:" | awk '{print $2}')
              
              if [ -z "$submission_id" ]; then
                echo "Failed to get submission ID"
                ((attempt++))
                continue
              }
              
              echo "Got submission ID: $submission_id"
              
              # Check status every 30 seconds for up to 30 minutes
              local timeout=1800  # 30 minutes
              local elapsed=0
              local interval=30
              
              while [ $elapsed -lt $timeout ]; do
                echo "Checking status of submission $submission_id (${elapsed}s elapsed)..."
                
                local status_output=$(xcrun notarytool info "$submission_id" \
                  --keychain-profile "notarytool-profile" \
                  --verbose)
                
                echo "Status output: $status_output"
                
                if echo "$status_output" | grep -q "status: Accepted"; then
                  echo "Notarization successful for $(basename $file_to_notarize)"
                  
                  # Staple the notarization
                  echo "Stapling notarization to $(basename $file_to_notarize)..."
                  xcrun stapler staple "$file_to_notarize"
                  
                  return 0
                elif echo "$status_output" | grep -q "status: Invalid"; then
                  echo "Notarization failed with status Invalid"
                  echo "Full status information:"
                  echo "$status_output"
                  break
                fi
                
                sleep $interval
                elapsed=$((elapsed + interval))
                echo "Waited ${elapsed}s out of ${timeout}s..."
              done
              
              echo "Notarization attempt $attempt timed out or failed"
              echo "Last known status:"
              xcrun notarytool info "$submission_id" \
                --keychain-profile "notarytool-profile" \
                --verbose
              
              sleep 60
              ((attempt++))
            done
            
            echo "All notarization attempts failed for $(basename $file_pattern)"
            return 1
          }
          
          echo "Starting DMG notarization..."
          notarize_with_retry "./dist/Fyenance-*.dmg" || exit 1
          
          echo "Starting ZIP notarization..."
          notarize_with_retry "./dist/Fyenance-*.zip" || exit 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: dist/
          retention-days: 1  # We only need these temporarily until the release is created

  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Download artifacts from build jobs (you'll need to upload them in the build job)
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: Release ${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
          files: dist/**/*  # Upload all files from the dist directory

