name: Build/Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version from package.json
        id: get-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    timeout-minutes: 180
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Install the Apple certificate
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          
          echo "Verifying certificate..."
          openssl pkcs12 -in certificate.p12 -noout -info -passin pass:"$P12_PASSWORD" || { echo "Certificate validation failed"; exit 1; }
          
          echo "Importing certificate..."
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          
          echo "Verifying import..."
          security find-identity -v -p codesigning build.keychain || { echo "No valid signing identity found"; exit 1; }
          
          echo "Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          echo "Testing codesign access..."
          security find-certificate -a -c "Developer ID Application" build.keychain || { echo "Developer ID certificate not found"; exit 1; }

          echo "Cleaning up..."
          rm certificate.p12

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          npm install --save-dev dmg-license
          npm install --save-dev electron-builder@24.9.1
          npm install --save-dev @electron/notarize@2.3.2
          npm ls electron-builder  # Debug: verify installed version
          npm ls @electron/notarize  # Debug: verify installed version

      - name: Build/Release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          release: false
          mac_certs: ${{ secrets.MACOS_CERTIFICATE }}
          mac_certs_password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          args: >
            ${{ matrix.os == 'macos-latest' && '--mac --x64 --arm64 --config.mac.target=dmg --config.mac.target=zip --config.mac.minimumSystemVersion=10.12' ||
                matrix.os == 'windows-latest' && '--win --config.productName="Fyenance"' ||
                matrix.os == 'ubuntu-latest' && '--linux --config.productName="Fyenance"' }}

      - name: Sign Windows Build
        if: matrix.os == 'windows-latest'
        uses: azure/trusted-signing-action@v0.5.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE }}
          files-folder: ${{ github.workspace }}/dist/win-unpacked
          files-folder-filter: "exe,dll"
          file-digest: "SHA256"
          timestamp-rfc3161: "http://timestamp.acs.microsoft.com"
          timestamp-digest: "SHA256"
          
      - name: Sign Windows Installer
        if: matrix.os == 'windows-latest'
        uses: azure/trusted-signing-action@v0.5.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE }}
          files-folder: ${{ github.workspace }}/dist
          files-folder-filter: "exe"
          file-digest: "SHA256"
          timestamp-rfc3161: "http://timestamp.acs.microsoft.com"
          timestamp-digest: "SHA256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: dist/
          retention-days: 1

  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: Release ${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
          files: |
            dist/**/*-arm64.dmg
            dist/**/*-x64.dmg
            dist/**/*-Setup-*.exe
            dist/**/*.AppImage
            dist/**/*-arm64.zip
            dist/**/*-x64.zip
            dist/**/*-arm64.dmg.blockmap
            dist/**/*-x64.dmg.blockmap
            dist/**/*-arm64.zip.blockmap
            dist/**/*-x64.zip.blockmap
            dist/**/*-Setup-*.exe.blockmap
            dist/**/latest*.yml

